{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useFetch = (url, method = \"GET\") => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState('null');\n\n  const postData = postData => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    });\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async fetchOptions => {\n      setIsPending(true);\n\n      try {\n        const res = await fetch(url, { ...fetchOptions,\n          signal: controller.signal\n        });\n\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('Could not fetch the data');\n        }\n      }\n    };\n\n    if (method === \"GET\") {\n      fetchData();\n    }\n\n    if (method === \"POST\" && options) {\n      fetchData(options);\n    }\n\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url, options, method]);\n  return {\n    data,\n    isPending,\n    error,\n    postData\n  };\n};\n\n_s(useFetch, \"3R9QPs/EnJDE1a5PaSH50HXLGdY=\");","map":{"version":3,"sources":["/Volumes/4TBSamsungEvo860/Code/STUDY/The Net Ninja/React/Chapter 11/cooking-ninja/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","method","data","setData","isPending","setIsPending","error","setError","options","setOptions","postData","headers","body","JSON","stringify","controller","AbortController","fetchData","fetchOptions","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAM,GAAG,KAAf,KAAyB;AAAA;;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,MAAD,CAAtC;;AAEA,QAAMa,QAAQ,GAAIA,QAAD,IAAc;AAC7BD,IAAAA,UAAU,CAAC;AACTR,MAAAA,MAAM,EAAE,MADC;AAETU,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AALG,KAAD,CAAV;AAOD,GARD;;AAUAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AAEA,UAAMC,SAAS,GAAG,MAAOC,YAAP,IAAwB;AACxCb,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAMc,GAAG,GAAG,MAAMC,KAAK,CAACpB,GAAD,EAAM,EAAE,GAAGkB,YAAL;AAAmBG,UAAAA,MAAM,EAAEN,UAAU,CAACM;AAAtC,SAAN,CAAvB;;AACA,YAAG,CAACF,GAAG,CAACG,EAAR,EAAY;AACV,gBAAM,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,UAAd,CAAN;AACD;;AACD,cAAMtB,IAAI,GAAG,MAAMiB,GAAG,CAACM,IAAJ,EAAnB;AAEApB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAVD,CAUE,OAAOmB,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAFD,MAEO;AACLxB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAAC,0BAAD,CAAR;AACD;AACF;AACF,KArBD;;AAuBA,QAAIN,MAAM,KAAK,KAAf,EAAsB;AACpBgB,MAAAA,SAAS;AACV;;AACD,QAAIhB,MAAM,KAAK,MAAX,IAAqBO,OAAzB,EAAkC;AAChCS,MAAAA,SAAS,CAACT,OAAD,CAAT;AACD;;AAEDS,IAAAA,SAAS;AAET,WAAO,MAAM;AACXF,MAAAA,UAAU,CAACe,KAAX;AACD,KAFD;AAID,GAvCQ,EAuCN,CAAC9B,GAAD,EAAMQ,OAAN,EAAeP,MAAf,CAvCM,CAAT;AAyCA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,KAAnB;AAA0BI,IAAAA;AAA1B,GAAP;AACD,CA1DM;;GAAMX,Q","sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const useFetch = (url, method = \"GET\") => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n  const [options, setOptions] = useState('null')\n\n  const postData = (postData) => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    })\n  }\n\n  useEffect(() => {\n    const controller = new AbortController()\n\n    const fetchData = async (fetchOptions) => {\n      setIsPending(true)\n      \n      try {\n        const res = await fetch(url, { ...fetchOptions, signal: controller.signal })\n        if(!res.ok) {\n          throw new Error(res.statusText)\n        }\n        const data = await res.json()\n\n        setIsPending(false)\n        setData(data)\n        setError(null)\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('Could not fetch the data')\n        }\n      }\n    }\n\n    if (method === \"GET\") {\n      fetchData()\n    } \n    if (method === \"POST\" && options) {\n      fetchData(options)\n    }\n\n    fetchData()\n\n    return () => {\n      controller.abort()\n    }\n\n  }, [url, options, method])\n\n  return { data, isPending, error, postData }\n}"]},"metadata":{},"sourceType":"module"}